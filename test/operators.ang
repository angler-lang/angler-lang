operator <_>                closed
operator if_then_else_      prefix  0
operator _==_               infixN  2
operator _/=_               infixN  2
operator _<_                infixN  3
operator _<=_               infixN  3
operator _>_                infixN  3
operator _>=_               infixN  3
operator _+_                infixL  4
operator _-_                infixL  4
operator _*_                infixL  5
operator _/_                infixL  5
operator _^_                infixR  6
operator -_                 prefix  7
operator _!                 postfix 8

_+_ : Nat -> Nat -> Nat
Z   + n = n
S m + n = S (m + n)

if_then_else_ : forall t:Type . Bool -> t -> t -> t
if True  then x else _ = x
if False then _ else x = x

x = < < < < a > > > >

x : Bool -> Nat
x b = S Z + (if b then Z else S Z)

x = if a b c == (d e /= f l) then g + h - i * j! - -k else -m!
-- x = (if_then_else_
--         (_==_ (a b c)
--               ((_/=_ (d e) (f l))))
--         (_-_  (_-_ (_+_ (g) (h))
--                        (_*_ (i)
--                             (_! (j))))
--               (-_ (k)))
--         (-_   (_! (m))))
-- x = if (\a -> (a d e == f) g /= h) then b else c
x = if a ^ d ^ e /= f g then b else c

x = d * < (a == b) c >

x = a + b - - c

-- scope testing

x = a + b - c * d                       -- _-_ (_+_ a b) (_*_ c d)

x = let operator _*_ infixR 3
    in a + b - c * d                    -- _*_ (_+_ a (_-_ b c)) d
    where
        operator _+_ infixR 4
        operator _-_ infixR 4

x = let operator _*_ infixR 3
        operator _+_ infixR 5
    in a + b - c * d                    -- _*_ (_-_ (_+_ a b) c) d
    where
        operator _+_ infixR 4
        operator _-_ infixR 4
