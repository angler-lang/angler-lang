module All exports (Nat, filter)

-- import List as L (_::_, Nil)
-- import List (List)

operator _::_ infixR 20
closed List : Type -> Type with
        Nil  : forall t:Type . List t
        _::_ : forall t:Type . t -> List t -> List t

open Char : Type

String : Type
String = List Char

id : forall t:Type . t -> t
the : (select t:Type) -> t -> t

id x = x
the _ x = x
-- the t x = id { t = t } x                -- PARSE ERROR: implicit apply not supported

operator _._ infixL 10
_._ : forall a, b, c:Type . (b -> c) -> (a -> b) -> a -> c
_._ f g x = f (g x)

operator _$_ infixL 1
_$_ : forall a, b:Type . (a -> b) -> a -> b
f $ x = f x

closed Nat : Type with
        Z : Nat
        S : Nat -> Nat

closed Bool : Type with
        True  : Bool
        False : Bool

operator _:*:_  infixR 2
operator _;_    infixR 2
closed _:*:_ : Type -> Type -> Type with        -- tuples
        _;_ : forall a, b:Type . a -> b -> a :*: b

curry : forall a, b, c:Type . ((a :*: b) -> c) -> a -> b -> c
curry f x y = f (x ; y)

threeTuple : Nat :*: Bool :*: Type
threeTuple = Z ; True ; Nat

fst' : forall a, b, c:Type . a :*: b :*: c -> a
fst' (x ; _ ; _) = x

-- Bool = Nat           -- Bool is data type   | ERROR: expecting `function` instead of `closed type`
-- True = False         -- True is constructor | ERROR: expecting `function` instead of `closed type`


-- should this be allowed? It is what basically happens in any `closed` or `open`
reopen Type with
        Tipo : Type -> Type

open Count : Type

reopen Count with
        One : Count

reopen Count with
        Two : Count

open Currency : Type with
        USD : Nat -> Currency
        EUR : Nat -> Currency

foldr : forall x:Type, y:Type . (x -> y -> y) -> y -> List x -> y
foldr f (x :: xs) y = f x rest
        where
                rest : forall y:Type . y
                rest = foldr f xs y
foldr _ Nil y = y

operator if_then_else_ prefix 0
if_then_else_ : forall t:Type . Bool -> t -> t -> t
if True then yes else _ = yes
if_then_else_ False _ no = no

operator _:::_ infixR 20
closed Vect : Nat -> Type -> Type with
        VNil  : forall t:Type . Vect Z t
        _:::_ : forall t:Type, n:Nat . t -> Vect n t -> Vect (S n) t

operator _+_ infixL 3
_+_ : t -> t -> t
        where   t : Type
                t = Nat
-- t no está disponible aquí
Z   +   m = m
S n +   m = S (n + m)
-- _+_ Z     m = m
-- _+_ (S n) m = S (n + m)

filter : forall t:Type . (t -> Bool) -> List t -> List t
filter g xs =
        case xs : forall t:Type . List t of
                x :: xs = (if g x then _::_ x else id) filter g xs
                Nil = Nil

filterVect : forall t:Type, n:Nat . (t -> Bool) -> Vect n t -> exists m:Nat . Vect m t
filterVect g (x ::: xs) = (if g x then _:::_ x else id) filterVect g xs
filterVect _ Nil        = Nil
-- filterVect g (x ::: xs) {n = S nxt} = (if g x then _:::_ x else id) filterVect {n = nxt} g xs
-- filterVect _ (Nil    )  {n = Z    } = Nil

const : forall a, b:Type . a -> b -> b
-- const = \ _ x -> x                   -- PARSE ERROR: λ-function not supported
const _ x = x

zeroes : List Nat -> List Nat
zeroes = filter isZero where
    isZero : Nat -> Bool
    isZero Z = True
    -- isZero _ = False

map : forall a, b:Type . (a -> b) -> List a -> List b
map f = foldr (_::_ . f) Nil

ones : List Nat -> List Nat
ones = map S . zeroes

firstZ : forall n:Nat . Vect n Nat -> Nat
firstZ (Z :: xs) = Z
firstZ (_ :: xs) = S (firstZ xs)
-- firstZ Nil       = error "no Z in Vect"      -- no strings yet

operator _=_ infixL 9
_=_ : Type -> Type -> Type
(a = b) = a               -- parses a = «b = a»

-- f = \ -> n -> n      -- parse error: no arguments for lambda

operator <_&_> closed
operator <_/\_> closed
closed <_&_> : Type -> Type -> Type with
        <_/\_> : forall a:Type, b:Type . a -> b -> < a & b >
-- : : String -> Type -> (String & Type) -- parser error: ':' unexpected
:* : String -> Type -> < String & Type >
:* str typ = < str /\ typ >

f : Nat
f = 2 + let a : Nat
            a = 3
            b : Nat
            b = a + 2 in a
